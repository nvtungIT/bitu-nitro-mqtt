///
/// JHybridMQTTSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridMQTTSpec.hpp"



#include <string>

namespace margelo::nitro::math {

  jni::local_ref<JHybridMQTTSpec::jhybriddata> JHybridMQTTSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridMQTTSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridMQTTSpec::initHybrid),
    });
  }

  size_t JHybridMQTTSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridMQTTSpec::connect(const std::string& clientID, const std::string& host, double port) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* clientID */, jni::alias_ref<jni::JString> /* host */, double /* port */)>("connect");
    method(_javaPart, jni::make_jstring(clientID), jni::make_jstring(host), port);
  }
  void JHybridMQTTSpec::publish(const std::string& topic, const std::string& message) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* topic */, jni::alias_ref<jni::JString> /* message */)>("publish");
    method(_javaPart, jni::make_jstring(topic), jni::make_jstring(message));
  }
  void JHybridMQTTSpec::subscribe(const std::string& topic) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<jni::JString> /* topic */)>("subscribe");
    method(_javaPart, jni::make_jstring(topic));
  }
  void JHybridMQTTSpec::disconnect() {
    static const auto method = _javaPart->getClass()->getMethod<void()>("disconnect");
    method(_javaPart);
  }
  bool JHybridMQTTSpec::isConnected() {
    static const auto method = _javaPart->getClass()->getMethod<jboolean()>("isConnected");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }

} // namespace margelo::nitro::math
