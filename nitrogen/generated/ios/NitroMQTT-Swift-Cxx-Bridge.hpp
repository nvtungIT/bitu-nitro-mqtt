///
/// NitroMQTT-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ConnectionState` to properly resolve imports.
namespace margelo::nitro::mqtt { enum class ConnectionState; }
// Forward declaration of `HybridMQTTSpec` to properly resolve imports.
namespace margelo::nitro::mqtt { class HybridMQTTSpec; }
// Forward declaration of `HybridMathSpec` to properly resolve imports.
namespace margelo::nitro::mqtt { class HybridMathSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridMQTTSpecCxx` to properly resolve imports.
namespace NitroMQTT { class HybridMQTTSpecCxx; }
// Forward declaration of `HybridMathSpecCxx` to properly resolve imports.
namespace NitroMQTT { class HybridMathSpecCxx; }

// Include C++ defined types
#include "ConnectionState.hpp"
#include "HybridMQTTSpec.hpp"
#include "HybridMathSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::mqtt::bridge::swift {

  // pragma MARK: std::shared_ptr<margelo::nitro::mqtt::HybridMathSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::mqtt::HybridMathSpec>`.
   */
  using std__shared_ptr_margelo__nitro__mqtt__HybridMathSpec_ = std::shared_ptr<margelo::nitro::mqtt::HybridMathSpec>;
  std::shared_ptr<margelo::nitro::mqtt::HybridMathSpec> create_std__shared_ptr_margelo__nitro__mqtt__HybridMathSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__mqtt__HybridMathSpec_(std__shared_ptr_margelo__nitro__mqtt__HybridMathSpec_ cppType);
  
  // pragma MARK: std::function<void(const std::string& /* topic */, const std::string& /* message */)>
  /**
   * Specialized version of `std::function<void(const std::string&, const std::string&)>`.
   */
  using Func_void_std__string_std__string = std::function<void(const std::string& /* topic */, const std::string& /* message */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * topic * /, const std::string& / * message * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_std__string_Wrapper(const std::function<void(const std::string& /* topic */, const std::string& /* message */)>& func): _function(func) {}
    explicit Func_void_std__string_std__string_Wrapper(std::function<void(const std::string& /* topic */, const std::string& /* message */)>&& func): _function(std::move(func)) {}
    inline void call(std::string topic, std::string message) const {
      _function(topic, message);
    }
  private:
    std::function<void(const std::string& /* topic */, const std::string& /* message */)> _function;
  };
  inline Func_void_std__string_std__string create_Func_void_std__string_std__string(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::string, std::string), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__string_std__string([sharedClosureHolder, call](const std::string& topic, const std::string& message) -> void {
      call(sharedClosureHolder.get(), topic, message);
    });
  }
  inline std::shared_ptr<Func_void_std__string_std__string_Wrapper> share_Func_void_std__string_std__string(const Func_void_std__string_std__string& value) {
    return std::make_shared<Func_void_std__string_std__string_Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<Promise<ConnectionState>>
  /**
   * Specialized version of `std::shared_ptr<Promise<ConnectionState>>`.
   */
  using std__shared_ptr_Promise_ConnectionState__ = std::shared_ptr<Promise<ConnectionState>>;
  inline std::shared_ptr<Promise<ConnectionState>> create_std__shared_ptr_Promise_ConnectionState__() {
    return Promise<ConnectionState>::create();
  }
  
  // pragma MARK: std::function<void(ConnectionState /* result */)>
  /**
   * Specialized version of `std::function<void(ConnectionState)>`.
   */
  using Func_void_ConnectionState = std::function<void(ConnectionState /* result */)>;
  /**
   * Wrapper class for a `std::function<void(ConnectionState / * result * /)>`, this can be used from Swift.
   */
  class Func_void_ConnectionState_Wrapper final {
  public:
    explicit Func_void_ConnectionState_Wrapper(const std::function<void(ConnectionState /* result */)>& func): _function(func) {}
    explicit Func_void_ConnectionState_Wrapper(std::function<void(ConnectionState /* result */)>&& func): _function(std::move(func)) {}
    inline void call(int result) const {
      _function(static_cast<ConnectionState>(result));
    }
  private:
    std::function<void(ConnectionState /* result */)> _function;
  };
  inline Func_void_ConnectionState create_Func_void_ConnectionState(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, int), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_ConnectionState([sharedClosureHolder, call](ConnectionState result) -> void {
      call(sharedClosureHolder.get(), static_cast<int>(result));
    });
  }
  inline std::shared_ptr<Func_void_ConnectionState_Wrapper> share_Func_void_ConnectionState(const Func_void_ConnectionState& value) {
    return std::make_shared<Func_void_ConnectionState_Wrapper>(value);
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(const std::function<void(const std::exception_ptr& /* error */)>& func): _function(func) {}
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::move(func)) {}
    inline void call(std::exception_ptr error) const {
      _function(error);
    }
  private:
    std::function<void(const std::exception_ptr& /* error */)> _function;
  };
  inline Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::exception_ptr), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__exception_ptr([sharedClosureHolder, call](const std::exception_ptr& error) -> void {
      call(sharedClosureHolder.get(), error);
    });
  }
  inline std::shared_ptr<Func_void_std__exception_ptr_Wrapper> share_Func_void_std__exception_ptr(const Func_void_std__exception_ptr& value) {
    return std::make_shared<Func_void_std__exception_ptr_Wrapper>(value);
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::mqtt::HybridMQTTSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::mqtt::HybridMQTTSpec>`.
   */
  using std__shared_ptr_margelo__nitro__mqtt__HybridMQTTSpec_ = std::shared_ptr<margelo::nitro::mqtt::HybridMQTTSpec>;
  std::shared_ptr<margelo::nitro::mqtt::HybridMQTTSpec> create_std__shared_ptr_margelo__nitro__mqtt__HybridMQTTSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__mqtt__HybridMQTTSpec_(std__shared_ptr_margelo__nitro__mqtt__HybridMQTTSpec_ cppType);

} // namespace margelo::nitro::mqtt::bridge::swift
